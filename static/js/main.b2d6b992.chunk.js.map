{"version":3,"sources":["PlayButton.js","PauseButton.js","SettingsButton.js","ResetButton.js","SettingsContext.js","BreakIntervalsIndicator.js","AnimatedPage.jsx","Timer.js","BackButton.js","ReactSliderComponent.js","Settings.js","App.js","reportWebVitals.js","index.js"],"names":["PlayButton","props","xmlns","className","viewBox","fill","fillRule","d","clipRule","PauseButton","SettingsButton","ResetButton","SettingsContext","react","createContext","BreakIntervalsIndicator","settingsInfo","useContext","useState","Array","breakIntervals","keys","map","i","indicatorList","setIndicatorList","useEffect","_","index","randKey","Math","round","random","breakIntervalsDone","settings","initial","opacity","x","animate","exit","timer","AnimatedPage","page","children","div","variants","colors","Timer","initialStates","restart","isPaused","mode","secondsLeft","workMinutes","setRestart","setIsPaused","setMode","setSecondsLeft","setBreakIntervalsDone","breakIntervalsDoneRef","useRef","secondsLeftRef","isPausedRef","modeRef","current","interval","setInterval","autoStart","prevState","nextMode","nextSeconds","breakMinutes","longBreakMinutes","switchMode","clearInterval","totalSeconds","percentage","minutes","floor","seconds","to","onClick","setShowSettings","value","text","styles","buildStyles","textColor","pathColor","tailColor","style","marginTop","BackButton","ReactSliderComponent","React","memo","setValue","label","ReactSlider","color","thumbClassName","trackClassName","onChange","e","handleChange","min","max","Settings","reset","setReset","workMinutesRef","breakMinutesRef","longBreakMinutesRef","breakIntervalsRef","setAutoStart","console","log","textAlign","type","checked","setWorkMinutes","setBreakMinutes","setLongBreakMinutes","setBreakIntervals","setKey","App","showSettings","key","location","useLocation","Provider","path","element","pathname","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","basename"],"mappings":"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","file":"static/js/main.b2d6b992.chunk.js","sourcesContent":["function PlayButton(props) {\r\n  return (\r\n    <button {...props}>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\r\n      </svg>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default PlayButton;","function PauseButton(props) {\r\n  return (\r\n    <button {...props}>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n        <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n      </svg>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default PauseButton;","function SettingsButton(props) {\r\n  return (\r\n    <button {...props}>\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"currentColor\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\"\r\n          clipRule=\"evenodd\"\r\n        />\r\n      </svg>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default SettingsButton;\r\n","function ResetButton(props) {\r\n  return (\r\n    <button {...props}>\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"currentColor\"\r\n      >\r\n        <path d=\"M21.962,12.875A10.03,10.03,0,1,1,19.122,5H16a1,1,0,0,0-1,1h0a1,1,0,0,0,1,1h4.143A1.858,1.858,0,0,0,22,5.143V1a1,1,0,0,0-1-1h0a1,1,0,0,0-1,1V3.078A11.985,11.985,0,1,0,23.95,13.1a1.007,1.007,0,0,0-1-1.1h0A.982.982,0,0,0,21.962,12.875Z\" />\r\n      </svg>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default ResetButton;\r\n","import react from 'react';\r\n\r\nconst SettingsContext = react.createContext({});\r\n\r\nexport default SettingsContext;","import React, { useEffect, useState, useContext } from \"react\";\r\nimport SettingsContext from \"./SettingsContext\";\r\n\r\nfunction BreakIntervalsIndicator(props) {\r\n  const settingsInfo = useContext(SettingsContext);\r\n  const [indicatorList, setIndicatorList] = useState(\r\n    [...Array(settingsInfo.breakIntervals).keys()].map((i) => i + 1)\r\n  );\r\n\r\n  //A better approach is to build an array of empty indicators\r\n  //and then fill them one by one, instead of creating the whole list over and over again\r\n  function indicatorBuilder(list) {\r\n    return list.map((_, index) => {\r\n      const randKey = Math.round(Math.random() * 1000);\r\n      if (props.breakIntervalsDone >= index) {\r\n        return (\r\n          <div\r\n            key={randKey}\r\n            className=\"breakIntervalsIndicator breakIntervalsIndicatorFinished\"\r\n          ></div>\r\n        );\r\n      } else {\r\n        return <div key={randKey} className=\"breakIntervalsIndicator\"></div>;\r\n      }\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIndicatorList(indicatorBuilder(indicatorList));\r\n  }, [props.breakIntervalsDone]);\r\n\r\n  return (\r\n    <div className=\"flex breakIntervalsIndicatorContainer\">{indicatorList}</div>\r\n  );\r\n}\r\n\r\nexport default BreakIntervalsIndicator;\r\n","//import React from \"react\";\r\nimport { motion } from \"framer-motion/dist/framer-motion\";\r\n\r\nconst settings = {\r\n  initial: { opacity: 0, x: 100 },\r\n  animate: { opacity: 1, x: 0 },\r\n  exit: { opacity: 0, x: -100 },\r\n};\r\n\r\nconst timer = {\r\n  initial: { opacity: 0, x: -100 },\r\n  animate: { opacity: 1, x: 0 },\r\n  exit: { opacity: 0, x: 100 },\r\n};\r\n\r\nfunction AnimatedPage({ page, children }) {\r\n  return (\r\n    <motion.div\r\n      variants={page === \"settings\" ? settings : timer}\r\n      initial=\"initial\"\r\n      animate=\"animate\"\r\n      exit=\"exit\"\r\n      //transition={{ duration: 1 }}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nexport default AnimatedPage;\r\n","import { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport PlayButton from \"./PlayButton\";\r\nimport PauseButton from \"./PauseButton\";\r\nimport SettingsButton from \"./SettingsButton\";\r\nimport ResetButton from \"./ResetButton\";\r\nimport BreakIntervalsIndicator from \"./BreakIntervalsIndicator\";\r\nimport { useContext, useState, useEffect, useRef } from \"react\";\r\nimport SettingsContext from \"./SettingsContext\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AnimatedPage from \"./AnimatedPage\";\r\n\r\nconst colors = {\r\n  red: \"#f54e4e\",\r\n  green: \"#4aec8c\",\r\n  blue: \"#40a3ff\",\r\n};\r\n\r\nfunction Timer() {\r\n  const settingsInfo = useContext(SettingsContext);\r\n  const initialStates = {\r\n    restart: false,\r\n    isPaused: true,\r\n    mode: \"work\",\r\n    secondsLeft: settingsInfo.workMinutes * 60,\r\n    breakIntervalsDone: -1,\r\n  };\r\n  const [restart, setRestart] = useState(initialStates.restart);\r\n  const [isPaused, setIsPaused] = useState(initialStates.isPaused);\r\n  const [mode, setMode] = useState(initialStates.mode); // work/break/null\r\n  const [secondsLeft, setSecondsLeft] = useState(initialStates.secondsLeft);\r\n  //const [isCacheMem, setIsCacheMeme] = useState(false);\r\n  const [breakIntervalsDone, setBreakIntervalsDone] = useState(\r\n    initialStates.breakIntervalsDone\r\n  );\r\n  const breakIntervalsDoneRef = useRef(breakIntervalsDone); // filled yellow indicators\r\n  const secondsLeftRef = useRef(secondsLeft);\r\n  const isPausedRef = useRef(isPaused);\r\n  const modeRef = useRef(mode);\r\n\r\n  /*     useEffect(() => {\r\n    setIsPaused(JSON.parse(window.localStorage.getItem(\"isPaused\")));\r\n    setSecondsLeft(JSON.parse(window.localStorage.getItem(\"secondsLeft\")));\r\n    isPausedRef.current = isPaused;\r\n    secondsLeftRef.current = secondsLeft;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"isPaused\", isPaused);\r\n    window.localStorage.setItem(\"secondsLeft\", secondsLeft);\r\n  }, [isPaused, secondsLeft]); */\r\n\r\n  function tick() {\r\n    secondsLeftRef.current--;\r\n    setSecondsLeft(secondsLeftRef.current);\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsPaused(initialStates.isPaused);\r\n    isPausedRef.current = isPaused;\r\n    setBreakIntervalsDone(initialStates.breakIntervalsDone);\r\n    breakIntervalsDoneRef.current = breakIntervalsDone;\r\n    setMode(initialStates.mode);\r\n    modeRef.current = mode;\r\n    setSecondsLeft(initialStates.secondsLeft);\r\n    secondsLeftRef.current = secondsLeft;\r\n    setRestart(false);\r\n  }, [restart]);\r\n\r\n  useEffect(() => {\r\n    function switchMode() {\r\n      let nextMode = \"\";\r\n      if (modeRef.current === \"work\") {\r\n        if (breakIntervalsDoneRef.current >= settingsInfo.breakIntervals - 1) {\r\n          nextMode = \"longBreak\";\r\n        } else nextMode = \"break\";\r\n      } else nextMode = \"work\";\r\n\r\n      let nextSeconds = 0;\r\n      if (nextMode === \"work\") nextSeconds = settingsInfo.workMinutes * 60;\r\n      else if (nextMode === \"break\")\r\n        nextSeconds = settingsInfo.breakMinutes * 60;\r\n      else nextSeconds = settingsInfo.longBreakMinutes * 60;\r\n      setMode(nextMode);\r\n      modeRef.current = nextMode;\r\n\r\n      setSecondsLeft(nextSeconds);\r\n      secondsLeftRef.current = nextSeconds;\r\n    }\r\n\r\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\r\n    setSecondsLeft(secondsLeftRef.current);\r\n\r\n    const interval = setInterval(() => {\r\n      if (isPausedRef.current) {\r\n        return;\r\n      }\r\n      if (secondsLeftRef.current === 0) {\r\n        if (!settingsInfo.autoStart) {\r\n          setIsPaused(true);\r\n          isPausedRef.current = true;\r\n        }\r\n        if (\r\n          modeRef.current === \"work\" &&\r\n          breakIntervalsDoneRef.current < settingsInfo.breakIntervals\r\n        ) {\r\n          breakIntervalsDoneRef.current = breakIntervalsDoneRef.current + 1;\r\n          setBreakIntervalsDone((prevState) => prevState + 1);\r\n        }\r\n        if (modeRef.current === \"longBreak\") {\r\n          setRestart(true);\r\n        }\r\n        return switchMode();\r\n      }\r\n\r\n      tick();\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [settingsInfo]);\r\n\r\n  let totalSeconds = 0;\r\n  if (mode === \"work\") {\r\n    totalSeconds = settingsInfo.workMinutes * 60;\r\n  } else if (mode === \"break\") {\r\n    totalSeconds = settingsInfo.breakMinutes * 60;\r\n  } else {\r\n    totalSeconds = settingsInfo.longBreakMinutes * 60;\r\n  }\r\n  const percentage = Math.round((secondsLeft / totalSeconds) * 100);\r\n\r\n  const minutes = Math.floor(secondsLeft / 60);\r\n  let seconds = secondsLeft % 60;\r\n  if (seconds < 10) seconds = \"0\" + seconds;\r\n\r\n  return (\r\n    <AnimatedPage page=\"timer\">\r\n      <div>\r\n        <div className=\"settings-container\">\r\n          <Link to=\"/settings\">\r\n            <SettingsButton\r\n              className=\"settings-btn settings-reset-btns\"\r\n              onClick={() => settingsInfo.setShowSettings(true)}\r\n            />\r\n          </Link>\r\n          <ResetButton\r\n            className=\"reset-btn settings-reset-btns\"\r\n            onClick={() => setRestart(true)}\r\n          />\r\n        </div>\r\n        <div className=\"CircularProgressbar\">\r\n          <CircularProgressbar\r\n            value={percentage}\r\n            text={minutes + \":\" + seconds}\r\n            styles={buildStyles({\r\n              textColor: \"#fff\",\r\n              pathColor:\r\n                mode === \"work\"\r\n                  ? colors.red\r\n                  : mode === \"break\"\r\n                  ? colors.green\r\n                  : colors.blue,\r\n              tailColor: \"rgba(255,255,255,.2)\",\r\n            })}\r\n          />\r\n          <BreakIntervalsIndicator breakIntervalsDone={breakIntervalsDone} />\r\n        </div>\r\n        <div style={{ marginTop: \"20px\" }}>\r\n          {isPaused ? (\r\n            <PlayButton\r\n              className=\"play-pause-btns play-btn\"\r\n              onClick={() => {\r\n                setIsPaused(false);\r\n                isPausedRef.current = false;\r\n              }}\r\n            />\r\n          ) : (\r\n            <PauseButton\r\n              className=\"play-pause-btns pause-btn\"\r\n              onClick={() => {\r\n                setIsPaused(true);\r\n                isPausedRef.current = true;\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </AnimatedPage>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","function BackButton(props) {\r\n  return (\r\n    <button {...props}>\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className=\"h-5 w-5\"\r\n        viewBox=\"0 0 20 20\"\r\n        fill=\"currentColor\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm.707-10.293a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L9.414 11H13a1 1 0 100-2H9.414l1.293-1.293z\"\r\n          clipRule=\"evenodd\"\r\n        />\r\n      </svg>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default BackButton;\r\n","import ReactSlider from \"react-slider\";\r\nimport React, { useState } from \"react\";\r\n\r\n//function ReactSliderComponent(props) {\r\nexport const ReactSliderComponent = React.memo((props) => {\r\n  const [value, setValue] = useState(props.value);\r\n\r\n  function handleChange(e) {\r\n    setValue(e);\r\n    props.setValue(e);\r\n    //settingsInfo.setWorkMinutes(e);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <label>{props.label}: {value}:00</label>\r\n      <ReactSlider\r\n        className={`slider ${props.color}`}\r\n        thumbClassName={\"thumb\"}\r\n        trackClassName={\"track\"}\r\n        value={value}\r\n        onChange={(e) => handleChange(e)}\r\n        min={props.min}\r\n        max={props.max}\r\n      />\r\n    </>\r\n  );\r\n});\r\n\r\nexport default ReactSliderComponent;\r\n","import \"./slider.css\";\r\nimport SettingsContext from \"./SettingsContext\";\r\nimport React, { useContext, useState, useRef, useEffect } from \"react\";\r\nimport BackButton from \"./BackButton\";\r\nimport ReactSliderComponent from \"./ReactSliderComponent\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AnimatedPage from \"./AnimatedPage\";\r\n\r\nfunction Settings() {\r\n  const settingsInfo = useContext(SettingsContext);\r\n  const [reset, setReset] = useState(false);\r\n  const workMinutesRef = useRef(settingsInfo.workMinutes);\r\n  const breakMinutesRef = useRef(settingsInfo.breakMinutes);\r\n  const longBreakMinutesRef = useRef(settingsInfo.longBreakMinutes);\r\n  const breakIntervalsRef = useRef(settingsInfo.breakIntervals);\r\n  const [autoStart, setAutoStart] = useState(settingsInfo.autoStart);\r\n\r\n  function resetBtn() {\r\n    settingsInfo.setWorkMinutes(settingsInfo.initialStates.workMinutes);\r\n    settingsInfo.setBreakMinutes(settingsInfo.initialStates.breakMinutes);\r\n    settingsInfo.setLongBreakMinutes(\r\n      settingsInfo.initialStates.longBreakMinutes\r\n    );\r\n    settingsInfo.setBreakIntervals(settingsInfo.initialStates.breakIntervals);\r\n    settingsInfo.setAutoStart(settingsInfo.initialStates.autoStart);\r\n    workMinutesRef.current = settingsInfo.initialStates.workMinutes;\r\n    breakMinutesRef.current = settingsInfo.initialStates.breakMinutes;\r\n    longBreakMinutesRef.current = settingsInfo.initialStates.longBreakMinutes;\r\n    breakIntervalsRef.current = settingsInfo.initialStates.breakIntervals;\r\n\r\n    //For remounting the component without actually refreshing the page (without using states)\r\n    settingsInfo.setKey(Math.random);\r\n  }\r\n\r\n  function applyBtn() {\r\n    settingsInfo.setWorkMinutes(workMinutesRef.current);\r\n    settingsInfo.setBreakMinutes(breakMinutesRef.current);\r\n    settingsInfo.setLongBreakMinutes(longBreakMinutesRef.current);\r\n    settingsInfo.setBreakIntervals(breakIntervalsRef.current);\r\n    settingsInfo.setAutoStart(autoStart);\r\n\r\n    //settingsInfo.setShowSettings(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(\"re-rendered\");\r\n    setReset(false);\r\n  }, [reset]);\r\n\r\n  return (\r\n    <AnimatedPage page=\"settings\">\r\n      <div style={{ textAlign: \"left\" }}>\r\n        <Link to=\"/\">\r\n          <BackButton\r\n            className=\"back-btn\"\r\n            onClick={() => settingsInfo.setShowSettings(false)}\r\n          />\r\n        </Link>\r\n        <ReactSliderComponent\r\n          label=\"Work\"\r\n          value={workMinutesRef.current}\r\n          setValue={(e) => {\r\n            workMinutesRef.current = e;\r\n          }}\r\n          color=\"\"\r\n          min={1}\r\n          max={120}\r\n        />\r\n        <ReactSliderComponent\r\n          label=\"Breaks\"\r\n          value={breakMinutesRef.current}\r\n          setValue={(e) => {\r\n            breakMinutesRef.current = e;\r\n          }}\r\n          color=\"green\"\r\n          min={1}\r\n          max={120}\r\n        />\r\n        <ReactSliderComponent\r\n          label=\"Long Break\"\r\n          value={longBreakMinutesRef.current}\r\n          setValue={(e) => {\r\n            longBreakMinutesRef.current = e;\r\n          }}\r\n          color=\"blue\"\r\n          min={1}\r\n          max={120}\r\n        />\r\n        <ReactSliderComponent\r\n          label=\"Intervals\"\r\n          value={breakIntervalsRef.current}\r\n          setValue={(e) => {\r\n            breakIntervalsRef.current = e;\r\n          }}\r\n          color=\"yellow\"\r\n          min={1}\r\n          max={5}\r\n        />\r\n        <div className=\"flex auto-start\">\r\n          <label>Start breaks automatically</label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={autoStart}\r\n            onChange={() => setAutoStart(!autoStart)}\r\n          />\r\n        </div>\r\n        <div className=\"flex settings-btn-container\">\r\n          <Link to=\"/settings\">\r\n            <button\r\n              className=\"btn-with-text\"\r\n              onClick={() => {\r\n                resetBtn();\r\n                setReset(true);\r\n              }}\r\n            >\r\n              Reset\r\n            </button>\r\n          </Link>\r\n          <Link to=\"/\">\r\n            <button className=\"btn-with-text\" onClick={applyBtn}>\r\n              Apply\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </AnimatedPage>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","import \"./App.css\";\r\nimport Timer from \"./Timer\";\r\nimport Settings from \"./Settings\";\r\nimport { useState } from \"react\";\r\nimport SettingsContext from \"./SettingsContext\";\r\nimport {\r\n  BrowserRouter,\r\n  Route,\r\n  Router,\r\n  Routes,\r\n  useLocation,\r\n} from \"react-router-dom\";\r\nimport { AnimatePresence } from \"framer-motion/dist/framer-motion\";\r\n\r\nfunction App() {\r\n  const initialStates = {\r\n    workMinutes: 30,\r\n    breakMinutes: 5,\r\n    longBreakMinutes: 30,\r\n    breakIntervals: 4,\r\n    autoStart: false,\r\n  };\r\n\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [workMinutes, setWorkMinutes] = useState(initialStates.workMinutes);\r\n  const [breakMinutes, setBreakMinutes] = useState(initialStates.breakMinutes);\r\n  const [longBreakMinutes, setLongBreakMinutes] = useState(\r\n    initialStates.longBreakMinutes\r\n  );\r\n  const [breakIntervals, setBreakIntervals] = useState(\r\n    initialStates.breakIntervals\r\n  );\r\n  const [autoStart, setAutoStart] = useState(initialStates.autoStart);\r\n  const [key, setKey] = useState(Math.random);\r\n  const location = useLocation();\r\n  // do not put a slash at the end of the basename value.\r\n\r\n  return (\r\n    <main>\r\n      <SettingsContext.Provider\r\n        value={{\r\n          showSettings,\r\n          setShowSettings,\r\n          workMinutes,\r\n          breakMinutes,\r\n          setWorkMinutes,\r\n          setBreakMinutes,\r\n          longBreakMinutes,\r\n          setLongBreakMinutes,\r\n          breakIntervals,\r\n          setBreakIntervals,\r\n          initialStates,\r\n          autoStart,\r\n          setAutoStart,\r\n          setKey,\r\n        }}\r\n      >\r\n        <AnimatePresence mode=\"wait\">\r\n          <Routes key={location.pathname} location={location}>\r\n            <Route path=\"/\" element={<Timer />}></Route>\r\n            <Route path=\"/settings\" element={<Settings key={key} />}></Route>\r\n          </Routes>\r\n        </AnimatePresence>\r\n      </SettingsContext.Provider>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter basename=\"react-promodoro-timer\">\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}